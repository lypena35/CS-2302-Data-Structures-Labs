package Pena_Lorianne_Lab4;

/**
 * Created by LoriPena on 2/28/18.
 * Lorianne Pena
 * CS 2302 Spring 2018
 * Lab 4
 */

/**************************************************
 ** Simple Program to implement B-Tree operations **
 ** Essentially a wrapper for the BTreeNode class **
 ** This file includes the basic B-tree class     **
 ** Programmed by Olac Fuentes                    **
 ** Last modified  February 21, 2017              **
 ** Report bugs to me                             **
 ***************************************************/

public class BTree {
    public BTreeNode root;
    private int t; //2t is the maximum number of children a node can have
    private int height;
    private int numOfItems;
    private int numNodes;

    public BTree(int t) {
        root = new BTreeNode (t);
        this.t = t;
        height = 0;
        numOfItems = 0;
        numNodes = 1;
    }

    public int getHeight(BTreeNode T) {
        return height;
    }

    public void printHeight() {
        System.out.println ("Tree height is " + height);
    }

    public void insert(int newKey) {
        if (root.isFull ( )) {//Split root;
            split ( );
            height++;
            numNodes += 2;
        }
        numNodes += root.insert2 (newKey);
        numOfItems++;
    }

    public void print() {
        // Wrapper for node print method
        root.print ( );
    }

    public void printNodes() {
        // Wrapper for node print method
        root.printNodes ( );
    }

    /**
     * This method is to insert a number in this case to the B-tree
     * this method covers the duplicates and the number of nodes and keys
     *
     * @param newKey returns a new new key
     */
    public void insert3(int newKey) {
        if (searchBTree (this.root, newKey) != null) {
            System.out.println ("We found a duplicate: " + newKey);
            return;
        }
        if (root.isFull ( )) {//Split root;
            split ( );
            height++;
            numNodes += 2;
        }
        numNodes += root.insert2 (newKey);
        numOfItems++;
    }

    /**
     * This method was given to us in class. It is used to search the B-tree.
     *
     * @param T is the root of the B-Tree
     * @param k is the size of the depth
     * @return
     */
    BTreeNode searchBTree(BTreeNode T, int k) {
        int i = 0;
        while ((i < T.n) && (k > T.item[i]))
            i++;
        if ((i == T.n) || (k != T.item[i]))  //k is not in current node.
            if (T.isLeaf)
                return null;
            else
                return searchBTree (T.c[i], k);
        else
            return T;
    }

    public void split() {
        // Splits the root into three nodes.
        // The median element becomes the only element in the root
        // The left subtree contains the elements that are less than the median
        // The right subtree contains the elements that are larger than the median
        // The height of the tree is increased by one

        // System.out.println("Before splitting root");
        // root.printNodes(); // Code used for debugging
        BTreeNode leftChild = new BTreeNode (t);
        BTreeNode rightChild = new BTreeNode (t);
        leftChild.isLeaf = root.isLeaf;
        rightChild.isLeaf = root.isLeaf;
        leftChild.n = t - 1;
        rightChild.n = t - 1;
        int median = t - 1;
        for (int i = 0; i < t - 1; i++) {
            leftChild.c[i] = root.c[i];
            leftChild.item[i] = root.item[i];
        }
        leftChild.c[median] = root.c[median];
        for (int i = median + 1; i < root.n; i++) {
            rightChild.c[i - median - 1] = root.c[i];
            rightChild.item[i - median - 1] = root.item[i];
        }
        rightChild.c[median] = root.c[root.n];
        root.item[0] = root.item[median];
        root.n = 1;
        root.c[0] = leftChild;
        root.c[1] = rightChild;
        root.isLeaf = false;
        // System.out.println("After splitting root");
        // root.printNodes();
    }

    public int getNumOfItems() {
        return numOfItems;
    }//getter for number of items


    /**
     * This method is to find the minimum element at the desired depth. Question 2 (B)
     *
     * @param T the reference to the root of the B-Tree
     * @param d the integer to represent the depth starting at 0.
     */
    public void minElementDepth(BTreeNode T, int d) {//2 (b) depth starts at 0
        if (T == null) return;
        if (d == 0) System.out.println (T.item[0]);
        else {
            if (T.isLeaf) System.out.println ("No minimum element at this depth.");
            else {
                minElementDepth (T.c[0], d - 1);
            }
        }
    }

    /**
     * This method is to get the maximum element at the desired depth in the B-Tree. Question 2 (C)
     *
     * @param T the reference to the root of the B-Tree
     * @param d is the integer that represents the depth starting at 0.
     */
    public void maxElementDepth(BTreeNode T, int d) {//question 2 (c) depth starts at 0
        if (T == null) return;
        if (d == 0) System.out.println (T.item[T.n - 1]);
        else {
            if (T.isLeaf) System.out.println ("No max element in this depth.");
            else {
                maxElementDepth (T.c[T.n], d - 1);
            }
        }
    }

    /**
     * This method is to print the number of the nodes at the desired depth. Question 2 (D)
     *
     * @param T the reference to the root of the B-Tree.
     * @param d the integer that represents the depth of the tree starting at 0.
     * @return the number of nodes at the desired depth.
     */
    public int numOfNodesDepth(BTreeNode T, int d) {//num of nodes at depth question 2 (d)
        if (T == null) return 0;
        int count = 1;
        if (d == 0) {
            for (int i = 0; i < T.n; i++) {
                System.out.print (T.item[i] + " ");
            }
            System.out.println (" ");
        } else {
            if (T.isLeaf) {
                System.out.println ("No Nodes at This Depth.");
            }
            if (!T.isLeaf) {

                for (int i = 0; i < T.n; i++) {
                    count += numOfNodesDepth (T.c[i], d - 1);
                }

            }
            count += numOfNodesDepth (T.c[T.n], d - 1) - 1;
        }
        return count;
    }

    /**
     * This method  printing all the items at the desired depth. Question 2 (E).
     *
     * @param T the reference to the root of the B-Tree.
     * @param d the integer representing the depth of the B-Tree.
     * @return all the items at the desired depth.
     */
    public void allItemsAtDepth(BTreeNode T, int d) {//question 2 (e)
        if (T == null) return;
        if (d == 0) {
            for (int i = 0; i < T.n; i++) {
                System.out.print (T.item[i] + " ");
            }
            System.out.println ( );
        } else {
            if (!T.isLeaf) {
                for (int i = 0; i <= T.n; i++) {
                    allItemsAtDepth (T.c[i], d - 1);
                }
            }
        }
    }

    /**
     * This method is to check how many nodes are full. Question 2(F).
     *
     * @param T the reference to the root of the B-Tree.
     * @return the number of full nodes.
     */
    public int numOfFullNodes(BTreeNode T) {//question 2 (f)
        int result = 0;
        if (T == null) return 0;
        int isFull = 0;
        if (T.isFull ( )) {
            isFull++;
        }
        if (T.isLeaf) {
            return isFull;
        } else {
            for (int i = 0; i <= T.n; i++) {
                result += numOfFullNodes (T.c[i]) + isFull;
            }
        }
        return result;
    }

    /**
     * This method is to get the number of full leaves in the tree.
     *
     * @param T the reference to the root of the B Tree.
     * @return the number of full leaves.
     */
    public int numOfFullLeaves(BTreeNode T) {//question 2 (g)
        int result = 0;
        int isFull = 0;
        if (T.isLeaf) {
            if (T.isFull ( )) {
                isFull++;
            }
            return isFull;
        } else {
            for (int i = 0; i <= T.n; i++) {
                result += numOfFullNodes (T.c[i]) + isFull;
            }
        }
        return result;
    }

    /**
     * The method given k and returns the depth at which the the k is found in the B-Tree or -1
     * if k is not in the tree.
     *
     * @param T is the reference to the root of the B-Tree
     * @param k is the integer we are looking to see if it's in the B-Tree.
     * @return the number of the depth where k is. or -1.
     */
    public int findItemDepth(BTreeNode T, int k) { // question 2 (h)
        if (T == null) return -1;
        int i = 0;
        while ((i < T.n) && (k > T.item[i]))
            i++;
        if ((i == T.n) || (k < T.item[i]))  //k is not in current node.
            if (T.isLeaf)
                return -1;
            else {
                int d = findItemDepth (T.c[i], k);
                if (d == -1) {
                    return -1;
                } else {
                    return d + 1;
                }
            }
        else {
            return 0;
        }
    }

    /**
     * This method is checking and printing the items that are in the same node as input k.
     *
     * @param T the reference to the root of the B-Tree.
     * @param k the integer k that we are using as our item to print the nodes.
     */
    public void allItemsInSameNode(BTreeNode T, int k) {// question 2 (i)
        if (T == null) return;
        int i = 0;
        while (i < T.n && k > T.item[i]) {
            i++;
        }
        if (i == T.n || k < T.item[i]) {
            if (T.isLeaf) {
                System.out.println ("This item is not in the B-Tree");
                return;
            } else {
                allItemsInSameNode (T.c[i], k);
            }
        } else {
            for (int j = 0; j < T.n; j++) {
                System.out.print (T.item[j] + " ");
            }
        }
    }
    public void printKeysDes(BTreeNode T) {
        if(T.isLeaf) {
            for (int i = T.n - 1; i >= 0; i--)
                System.out.print (T.item[i] + " ");
            System.out.println ( );
        }else {

            printKeysDes (T.c[T.n]);
            for (int i = T.n - 1; i >= 0; i--) {
                System.out.println (T.item[i] + " ");
                printKeysDes (T.c[i]);
            }
        }
        }

}


package Pena_Lorianne_Lab4;

/**
 * Created by LoriPena on 2/28/18.
 * Lorianne Pena
 * CS 2302 Spring 2018
 * Lab 4
 */

/********************************************************
 ** Simple Program to implement insertions              **
 ** and traversals on B-trees                           **
 ** This file includes basic operations on B-tree nodes **
 ** Programmed by Olac Fuentes                          **
 ** Last modified October 9, 2017                       **
 ** Report bugs to me                                   **
 *********************************************************/
public class BTreeNode {
    public int n;          // Actual number of items on the node
    public boolean isLeaf; // Boolean indicator
    public int[] item;     // Items stored in the node. They are sorted ion ascending order
    public BTreeNode[] c;  // Children of node. Items in c[i] are less than item[i] (if it exists)
    // and greater than item[i-1] if it exists

    public BTreeNode(int t) {  // Build empty node
        isLeaf = true;
        item = new int[2 * t - 1];   // Array sizes are set to maximum possible size
        c = new BTreeNode[2 * t];
        n = 0;// Number of elements is zero, since node is empty

    }

    public boolean isFull() {
        return n == item.length;
    }

    public void insert(int newKey) {
        // Insert new item to current node
        // We make sure that the current node is not full by checking and
        // splitting if necessary before descending to node

        //System.out.println("inserting " + newKey); // Debugging code
        int t = c.length / 2;
        int i = n - 1;
        if (isLeaf) {
            while ((i >= 0) && (newKey < item[i])) { // Shift item greater than newKey to left
                item[i + 1] = item[i];
                i--;
            }
            n++;                    // Update number of items in node
            item[i + 1] = newKey;        // Insert new item
        } else {
            while ((i >= 0) && (newKey < item[i])) {
                i--;
            }
            int insertChild = i + 1;  // Subtree where new item must be inserted
            if (c[insertChild].isFull ( )) {
                // The root of the subtree where new item will be inserted has to be split
                // We promote the median of that root to the current node and
                // update items and references accordingly

                // Debugging code
                // System.out.println("This is the full node we're going to break ");
                // c[insertChild].printNodes();
                // System.out.println("going to promote " + c[insertChild].item[T-1]);
                n++;
                c[n] = c[n - 1];
                for (int j = n - 1; j > insertChild; j--) {
                    c[j] = c[j - 1];
                    item[j] = item[j - 1];
                }
                item[insertChild] = c[insertChild].item[t - 1];
                c[insertChild].n = t - 1;

                BTreeNode newNode = new BTreeNode (t);
                for (int k = 0; k < t - 1; k++) {
                    newNode.c[k] = c[insertChild].c[k + t];
                    newNode.item[k] = c[insertChild].item[k + t];
                }

                newNode.c[t - 1] = c[insertChild].c[2 * t - 1];
                newNode.n = t - 1;
                newNode.isLeaf = c[insertChild].isLeaf;
                c[insertChild + 1] = newNode;

                if (newKey < item[insertChild]) {
                    c[insertChild].insert (newKey);
                } else {
                    c[insertChild + 1].insert (newKey);
                }
            } else
                c[insertChild].insert (newKey);  //No need to split node
        }
    }

    public int insert2(int newKey) {
        // Insert new key to current node
        // We make sure that the current node is not full by checking and
        // splitting if necessary before descending to node

        boolean split = false;//set to keep track of when something splits
        int numSplits = 0;//keep track of the splitting process

        //System.out.println("inserting " + newKey); // Debugging code


        int t = c.length / 2;
        int i = n - 1;
        if (isLeaf) {
            while ((i >= 0) && (newKey < item[i])) { // Shift key greater than newKey to left
                item[i + 1] = item[i];
                i--;
            }
            n++;                    // Update number of keys in node
            item[i + 1] = newKey;        // Insert new key
        } else {
            while ((i >= 0) && (newKey < item[i])) {
                i--;
            }
            int insertChild = i + 1;  // Subtree where new key must be inserted
            if (c[insertChild].isFull ( )) {
                split = true;//because we know that when the child or root is full it must split

                // The root of the subtree where new key will be inserted has to be split
                // We promote the median of that root to the current node and
                // update keys and references accordingly

                // Debugging code
                // System.out.println("This is the full node we're going to break ");
                // c[insertChild].printNodes();
                // System.out.println("going to promote " + c[insertChild].key[T-1]);
                n++;
                c[n] = c[n - 1];
                for (int j = n - 1; j > insertChild; j--) {
                    c[j] = c[j - 1];
                    item[j] = item[j - 1];
                }
                item[insertChild] = c[insertChild].item[t - 1];
                c[insertChild].n = t - 1;

                BTreeNode newNode = new BTreeNode (t);
                for (int k = 0; k < t - 1; k++) {
                    newNode.c[k] = c[insertChild].c[k + t];
                    newNode.item[k] = c[insertChild].item[k + t];
                }

                newNode.c[t - 1] = c[insertChild].c[2 * t - 1];
                newNode.n = t - 1;
                newNode.isLeaf = c[insertChild].isLeaf;
                c[insertChild + 1] = newNode;

                if (newKey < item[insertChild]) {
                    numSplits = c[insertChild].insert2 (newKey);
                } else {
                    numSplits = c[insertChild + 1].insert2 (newKey);
                }
            } else
                numSplits = c[insertChild].insert2 (newKey);  //No need to split node
        }
        if (split) {//if we do have to split we add up the splits
            return numSplits + 1;
        }
        return numSplits;//we return the number of splits

    }

    public void print() {
        //Prints all items in the tree in ascending order
        if (isLeaf) {
            for (int i = 0; i < n; i++)
                System.out.print (item[i] + " ");
            //System.out.println();
        } else {
            for (int i = 0; i < n; i++) {
                c[i].print ( );
                System.out.print (item[i] + " ");
            }
            c[n].print ( );
        }
    }

    public void printNodes() {
        //Prints all items in the tree, node by node, using preorder
        //It also prints the indicator of whether a node is a leaf
        //Used mostly for debugging purposes
        for (int i = 0; i < n; i++)
            System.out.print (item[i] + " ");
        System.out.println (isLeaf);
        if (!isLeaf) {
            for (int i = 0; i <= n; i++) {
                c[i].printNodes ( );
            }
        }
    }
}

package Pena_Lorianne_Lab4;


/**
 * Created by LoriPena on 2/28/18.
 * Lorianne Pena
 * CS 2302 Spring 2018
 * Lab 4
 */

import java.util.Scanner;

public class BTreeTest {
    public static int[] array;
    public static int counter;


    public static void printAscending(BTreeNode T) {
        //Prints all items in the tree in ascending order
        if (T.isLeaf) {
            for (int i = 0; i < T.n; i++)
                System.out.print (T.item[i] + " ");
        } else {
            for (int i = 0; i < T.n; i++) {
                printAscending (T.c[i]);
                System.out.print (T.item[i] + " ");
            }
            printAscending (T.c[T.n]);

        }
    }

    public static int m1(BTreeNode T) {
        if (T.isLeaf)
            return T.n;
        return T.n + m1 (T.c[T.n]);
    }

    public static int m2(BTreeNode T) {//sum even nodes
        int sum = 0;
        for (int i = 0; i < T.n; i++) {
            if (T.item[i] % 2 == 0) {
                sum++;
                //System.out.println ("THis is sum: " + sum + " I: " + i);
            }
        }
        if (!T.isLeaf) {
            for (int i = 0; i <= T.n; i++) {
                sum += m2 (T.c[i]);
                //System.out.println ("THIS IS SUM2: " + sum + " I: "+ i);
            }
        }
        return sum;
    }

    public static int m3(BTreeNode T, int k) {//search
        int i = 0;
        while ((i < T.n) && (k > T.item[i])) //Sequentially search for k
            i++;
        if (T.isLeaf)
            return i;
        else
            return i + m3 (T.c[i], k);
    }

    /**
     * This method is extracting items from the B-Tree and placing the items into a sorted array.
     *
     * @param T is the reference to the root of the B-Tree
     * @return the sorted array
     */

    public static int[] extractToArray(BTreeNode T) {// question 2 (a)
        if (T.isLeaf) {
            for (int i = 0; i < T.n; i++) {
                array[counter] = T.item[i];
                counter++;
            }
        } else {
            for (int i = 0; i < T.n; i++) {
                extractToArray (T.c[i]);
                array[counter] = T.item[i];
                counter++;
            }
            extractToArray (T.c[T.n]);
        }
        return array;
    }

    /**
     * This method is to draw the B-Tree using the Standard draw class.
     * @param T the reference to the root of the B-Tree
     * @param x0 furthest point of x to the left
     * @param x1 furthest point of x to the right
     * @param y  y on the axis
     * @param y_inc the increment of y
     */
    public static void draw_tree(BTreeNode T, double x0, double x1, double y, double y_inc) {
        if (T == null)
            return;
        double xm = (x0 + x1) / 2;
        double yn = y - y_inc;
        int n=T.n;
        double cNodes = (((x1 + xm) / 2) - ((x0 + xm) / 2)) / n;//children nodes
        double halfOfChildNode = cNodes / 2;

        if(T.isLeaf){
            System.out.println ("This drawing of the B-Tree is finished. There are no nodes at this level." );
        }
        if (!T.isLeaf) {
            for (int i = 0; i <= n; i++) {
                if (i == 0) {
                    StdDraw.line (xm, y, (x1 + xm) / 2, yn);//right lines
                }
                if (i == n) {
                    StdDraw.line (xm, y, (x0 + xm) / 2, yn);//left lines
                    //right subtree
                    draw_tree (T.c[n], ((x1 + xm) / 2)-halfOfChildNode, ((x1 + xm) / 2)+halfOfChildNode , yn, y_inc);
               }
                else {
                    StdDraw.line (xm, y, ((x0 + xm) / 2) + (i*cNodes), yn);//middle lines
                    //left subtree and left and middle nodes of right subtree
                    draw_tree (T.c[i], ((x0 + xm) / 2) + (i*cNodes) - halfOfChildNode, ((x0 + xm) / 2) + (i*cNodes) + halfOfChildNode, yn, y_inc);
                }
            }
        }
        for(int j=0;j<n;j++) {//traversing the B-Tree
            StdDraw.setPenColor (StdDraw.WHITE);
            StdDraw.filledRectangle (xm+(j*3), y, 2, 1.5);
            StdDraw.setPenColor (StdDraw.BLACK);
            StdDraw.rectangle (xm+(j*3), y, 2, 1.5);
            StdDraw.text (xm+(j*3), y, Integer.toString (T.item[j]));
        }
    }

    /**
     * This method was given to us by Dr. Fuentes from the binary search tree method, this method allows us to see
     * how the B-tree is built step by step.
     */
    public static void pause() {
        Scanner s = new Scanner (System.in);
        System.out.println ("Press enter to continue.....");
        s.nextLine ( );
        StdDraw.clear ( );
    }

    public static void main(String[] args) {
        int x_max = 100;
        int y_max = 100;
        StdDraw.setXscale (0, x_max);
        StdDraw.setYscale (0, y_max);
        StdDraw.setPenColor (StdDraw.BLACK);
        //int [] S ={ 21, 2, 20, 12, 11, 18,  9, 17, 25, 30, 7, 13,  5, 14, 10,  6,  3, 19, 15, 16,  26, 8,  4, 24, 31,1};
        //int [] S = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
        int []S={4,7,13,17,24,1,3,5,6,8,10,11,14,16,18,20,25,30,31,35};
        //int[] S = {8, 9, 11, 4, 7, 12, 13, 17, 24, 15, 27, 28, 30, 33, 34, 37, 40, 42, 50, 16};
        //int[] S={5,15,6,9,20,78,1,3,24,25};

        BTree B = new BTree (3);
        //Build B-tree from array
        for (int i = 0; i < S.length; i++) {
            System.out.println ("New element: " + S[i]);
            B.insert3 (S[i]);
            BTreeNode T = B.root;
            printAscending (T);
            //pause ();
            //draw_tree (T, 0, x_max, y_max - 5, (y_max - 10.0) / B.getHeight (T));
            System.out.println ("Tree (pre-order traversal)");
            B.printNodes ( );
            System.out.println ("*********************");
        }

        BTreeNode T = B.root;
        //printAscending (T);
         //pause ();
        draw_tree (T, 0, x_max, y_max - 5, (y_max - 10.0) / B.getHeight (T));
        System.out.println ( );
        System.out.println (m1 (T));
        System.out.println (m2 (T));
        System.out.println (m3 (T, 42));

        System.out.println ("--------------------------------------------------------------");
        System.out.println ("A:" + "Extracting B-Tree to sorted array: ");
        array = new int[B.getNumOfItems ( )];
        extractToArray (T);
        for (int i = 0; i < array.length; i++) {
            System.out.print (array[i] + " ");
        }
        System.out.println ( );

        System.out.println ("--------------------------------------------------------------");
        System.out.print ("B:" + "Is the minimum element at the desired depth?: ");
        B.minElementDepth (T, 2);


        System.out.println (" ");


        System.out.println ("--------------------------------------------------------------");
        System.out.print ("C:" + "The maximum element at the desired depth is: ");
        B.maxElementDepth (T, 2);


        System.out.println ("--------------------------------------------------------------");
        System.out.println ("D:" + "The number of nodes in the tree at depth is: " + B.numOfNodesDepth (T, 0));


        System.out.println ("--------------------------------------------------------------");
        System.out.println ("E:" + "Printing all the items in the tree at desired depth is: ");
        B.allItemsAtDepth (T, 1);
        System.out.println ( );


        System.out.println ("--------------------------------------------------------------");
        System.out.println ("F:" + "The number of nodes in the tree that are full are: " + B.numOfFullNodes (T));

        System.out.println ("--------------------------------------------------------------");
        System.out.println ("G:" + "The number of full leaves is: " + B.numOfFullLeaves (T));

        System.out.println ("--------------------------------------------------------------");
        System.out.println ("H:" + "The depth that key is found in the tree is: " + B.findItemDepth (T, 51));

        System.out.println ("--------------------------------------------------------------");
        System.out.println ("I:" + "Printing the items that are in the same node as the given integer: ");
        B.allItemsInSameNode (T, 51);

        System.out.println ("------------------------------------------" );
        B.printKeysDes (T);

      /*
      //Build B-tree with random elements
      Random rn = new Random();
      BTree R = new BTree(3);
      for (int i=0;i<30;i++){
         int s = rn.nextInt(100);
         System.out.println("New element: "+s);
  			R.insert(s);
		   System.out.println("Tree (pre-order traversal)");
         R.printNodes();
         System.out.println("*********************");
      }
      T = R.root;
      printAscending(T);
      */
    }
}
