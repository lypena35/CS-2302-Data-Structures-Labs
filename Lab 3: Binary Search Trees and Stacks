package Pena_Lorianne_Lab3;

/**
 * Created by LoriPena on 2/19/18.
 * Lorianne Pena
 * CS 2302 Spring 2018
 * Lab 3
 */

import java.util.Scanner;
import java.util.Stack;

public class bst_ops {

    public static bstNode root;
    public static int[] array;
    public static int counter;

    /**
     * This method was given to us by Dr. Fuentes to insert nodes into the binary search tree
     *
     * @param T is the reference to the root of the binary search tree
     * @param i is the integer that will be inserted into the node
     * @return returns the reference to the node we are looking for
     */
    public static bstNode insert(bstNode T, int i) {
        if (T == null)
            T = new bstNode (i);
        else if (i < T.item)
            T.left = insert (T.left, i);
        else
            T.right = insert (T.right, i);
        return T;
    }

    /**
     * This method was given to us by Dr.Fuentes to search through the binary search tree
     *
     * @param T is the reference to the root of the binary search tree
     * @param i is the integer we are searching for in the binary search tree
     * @return returns the reference to the node where that integer resides
     */
    public static bstNode search(bstNode T, int i) {
        if (T == null || T.item == i)
            return T;
        if (i < T.item)
            return search (T.left, i);
        else
            return search (T.right, i);
    }

    /**
     * This method was also given to us by Dr. Fuentes is to find the minimum element in a binary search tree
     *
     * @param T is the reference to the root in the binary search tree
     * @return the reference to the minimum element in the binary search tree.
     */
    public static bstNode min(bstNode T) {
        if (T.left == null)
            return T;
        return min (T.left);
    }

    /**
     * This method was given to us by Dr. Fuentes to compute the height of the binary search tree.
     *
     * @param T is the reference to the root of the binary search tree
     * @return the height of the binary search tree
     */

    public static int height(bstNode T) {
        if (T == null)
            return -1;
        int hl = height (T.left);
        int hr = height (T.right);
        if (hl > hr)
            return 1 + hl;
        return 1 + hr;
    }

    /**
     * This method was given to us by Dr. Fuentes to delete a node in the binary search tree.
     *
     * @param T is the reference to the root of the binary tree
     * @param i is the integer node that we want to delete
     * @return the reference to the deleted node
     */
    public static bstNode delete(bstNode T, int i) {
        if (T == null)
            return null;
        if (i < T.item)
            T.left = delete (T.left, i);
        else if (i > T.item)
            T.right = delete (T.right, i);
        else
            // i == T.item
            if (T.left == null && T.right == null)
                T = null;
            else if (T.left == null && T.right != null)
                T = T.right;
            else if (T.left != null && T.right == null)
                T = T.left;
            else {
                bstNode succ = min (T.right);
                T.item = succ.item;
                T.right = delete (T.right, succ.item);
            }
        return T;
    }

    /**
     * This method was given to us by Dr. Fuentes, to search through the binary search tree in inorder traversal.
     *
     * @param T is the reference to the root of the binary search tree
     */

    public static void inOrder(bstNode T) {
        if (T != null) {
            inOrder (T.left);
            System.out.print (T.item + " ");
            inOrder (T.right);
        }
    }

    /**
     * This method was given to us by Dr. Fuentes to draw a graphical representation of the binary search tree.
     *
     * @param T     the reference to the root of the binary search tree
     * @param x0    x axis "From"
     * @param x1    second x axis or changing x axis "To"
     * @param y     y axis "From"
     * @param y_inc second y axis or changing y axis "To"
     */

    public static void draw_tree(bstNode T, double x0, double x1, double y, double y_inc) {

        if (T == null)
            return;
        double xm = (x0 + x1) / 2;
        double yn = y - y_inc;
        if (T.left != null) {
            StdDraw2.line (xm, y, (x0 + xm) / 2, yn);
            draw_tree (T.left, x0, xm, yn, y_inc);
        }
        if (T.right != null) {
            StdDraw2.line (xm, y, (x1 + xm) / 2, yn);
            draw_tree (T.right, xm, x1, yn, y_inc);
        }
        StdDraw2.setPenColor (StdDraw2.WHITE);
        StdDraw2.filledCircle (xm, y, 3);
        StdDraw2.setPenColor (StdDraw2.BLACK);
        StdDraw2.circle (xm, y, 3);
        StdDraw2.text (xm, y, Integer.toString (T.item));

    }


    /**
     * This method was given to us by Dr. Fuentes, this method allows us to see how the binary search tree is built step
     * by step.
     */
    public static void pause() {
        Scanner s = new Scanner (System.in);
        System.out.println ("Press enter to continue.....");
        s.nextLine ( );
        StdDraw2.clear ( );
    }

    /**
     * Method 1 for the lab, where we execute inorder traversal using a stack instead of recursion.
     *
     * @param T the reference to the  root of the binary search tree.
     */

    public static void inOrderStack(bstNode T) {
        Stack<bstNode> newStack = new Stack<> ( );

        while (T != null) {//checks left nodes until null
            newStack.push (T);
            T = T.left;
        }
        while (newStack.size ( ) > 0) {//traversing the tree
            T = newStack.pop ( );
            System.out.print (T.item + " ");
            if (T.right != null) {//visiting right nodes
                T = T.right;
                while (T != null) {//then visiting the next node to the left
                    newStack.push (T);
                    T = T.left;
                }
            }
        }
    }

    /**
     * Method 2 to create a iterative version of the search method provided to us.
     *
     * @param T the reference to the root of the binary search tree
     * @param i the integer we are searching for in the tree.
     * @return the reference to the node we are looking for or -1 if it isn't in the binary search tree.
     */

    public static bstNode searchIterative(bstNode T, int i) {

        while (T != null) {
            if (i < T.item) {//check left
                T = T.left;
            } else if (i > T.item) {//check right
                T = T.right;
            } else if (T.item == i) {//if found return node
                T = new bstNode (i);
                return T;
            }
        }
        T = new bstNode (-1);//else return -1
        return T;
    }

    /**
     * Method 3 building a binary search tree from a sorted array.
     *
     * @param A     is the sorted array we pass
     * @param first pointer or representing the "left" side of the binary search tree
     * @param last  pointer or representing the "right" side of the binary search tree
     * @return the reference to the binary search tree nodes
     */
    public static bstNode arrayToBst(int[] A, int first, int last) {
        if (first > last) return null;
        int middleElement = (first + last) / 2;//get root
        bstNode T = new bstNode (A[middleElement]);//start building the nodes

        T.left = arrayToBst (A, first, middleElement - 1);//get left half make it left child of root
        T.right = arrayToBst (A, middleElement + 1, last);//get right half and make it right child of root

        return T;
    }

    /**
     * Method 4 is to extract the nodes from the binary search tree into a sorted array.
     *
     * @param T is the reference to the root of the binary search tree
     * @return the sorted array
     */
    public static int[] extractToArray(bstNode T) {
        Stack<bstNode> stack = new Stack<> ( );
        while (T != null) {
            stack.push (T);
            T = T.left;
        }
        while (stack.size ( ) > 0) {
            T = stack.pop ( );
            array[counter] = T.item;
            counter++;
            if (T.right != null) {
                T = T.right;
                while (T != null) {
                    stack.push (T);
                    T = T.left;
                }
            }
        }
        return array;
    }

    /**
     * This method is getting the size of tree so we can initialize the array for method 4 to the size of the
     * binary search tree.
     *
     * @param T is the reference to the root of the binary search tree.
     * @return the size of the tree.
     */
    public static int sizeOfTree(bstNode T) {
        int size = 0;
        if (T != null) {
            size += sizeOfTree (T.left);
            size++;
            size += sizeOfTree (T.right);
        }
        return size;
    }

    /**
     * Method 5 part 1 this is to search through the binary search tree by depth.
     *
     * @param T     is the reference to the root of the binary search tree
     * @param depth is the integer we use to measure each depth of the binary search tree.
     */
    public static void bstDepth(bstNode T, int depth) {
        if (T == null) return;
        if (depth == 1) System.out.print (T.item + " ");//root
        else if (depth > 1) {//parents/children
            bstDepth (T.left, depth - 1);//left
        }
        bstDepth (T.right, depth - 1);//right
    }


    /**
     * Method 5 part 2 this to print out the keys at each depth of the binary search tree
     *
     * @param T the reference to the root of the binary search tree
     */
    public static void printBstDepth(bstNode T) {
        int m = height (T) + 1;
        for (int i = 1; i <= m; i++) {
            System.out.print ("Keys at depth " + (i - 1) + " : ");
            bstDepth (T, i);
            System.out.println ( );
        }
    }

    public static int m(bstNode T, int i) {
        if (T == null) return i;
        int k = m (T.left, i);
        System.out.println (k + " " + T.item);
        k = m (T.right, k + 1);
        return k;
    }

    public static int sumOfBst(bstNode T, int k) {
        int sum = 0;
        if (T == null) return -1;
        if (k < T.item) {
            sum += (T.item + sumOfBst (T.left, k));
        }
        if (k > T.item) {
            sum += (T.item + sumOfBst (T.right, k));
        }
        return sum;
    }

    public static int m2(bstNode T, int k) {
        int sum = 1;
        if (T == null) return sum;
        if (k < T.item) {
            sum += m2 (T.left, k);
        }
        if (k > T.item) {
            sum += m2 (T.right, k);
        }
        return sum;
    }



    public static void main(String[] args) {
        try {
            int x_max = 100;
            int y_max = 100;
           // Pena_Lorianne_Lab3.StdDraw2.setXscale (0, x_max);
            //StdDraw2.setYscale (0, y_max);
            //StdDraw2.setPenColor (StdDraw2.BLACK);
            //int[] A = {10, 16, 13, 17, 20, 19, 15, 4, 14, 8, 9, 5, 2, 3, 7, 12, 18, 1, 6, 11};
            //int[] C = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
            //int[] A = {10, 15, 12, 18, 4, 2, 8, 1, 3, 5, 9, 7};
            //int[] A={19,15,1,2,4,18,13,9,20,6,3,16,11,7,17,14,8,5,10,12};
            int[] C = {1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 15, 18};
            //int[]A={11,8,9,10,5,7,2,3,16,20,13,19,12};
            int[]A={11,8,16,5,9,13,20,2,7,10,12,19};


            int option = 0;
            System.out.println ("To build your binary search tree graph continue to press enter until you see your menu options.");
            bstNode B = null;
            for (int i = 0; i < A.length; i++) {
                B = insert (B, A[i]);
               // pause ( );
                //draw_tree (B, 0, x_max, y_max - 5, (y_max - 10.0) / height (B));
            }

            //m (B,0);
            System.out.println ( sumOfBst (B,13));

            System.out.println ("exam 2: --------------------------------" );
            System.out.println (m2 (B,2) );


            /**
            System.out.println ("Hello: Welcome! Please select from the following options: ");
            System.out.println ("Option 1: for method 1 the inorder stack.");
            System.out.println ("Option 2: for the iterative search method.");
            System.out.println ("Option 3: for the Binary Search to Array method.");
            System.out.println ("Option 4: for the extraction of the binary search tree to a sorted array method.");
            System.out.println ("Option 5: for the print out of keys at a certain depth method.");

            Scanner input = new Scanner (System.in);
            if (option <= 5) {
                option = input.nextInt ( );

                switch (option) {
                    case 1:
                        System.out.println ("Inorder stack.");
                        pause ( );
                        inOrderStack (B);//1
                        draw_tree (B, 0, x_max, y_max - 5, (y_max - 10.0) / height (B));
                        break;

                    case 2:
                        System.out.println ("Iterative search method, it will return -1, if the integer you are looking for is not in the tree.");
                        System.out.println ("Please type in the integer you want to check in the binary search tree and press enter twice and once more to exit.");
                        int num = input.nextInt ( );
                        B = searchIterative (B, num);//2
                        pause ( );
                        draw_tree (B, 0, x_max, y_max - 5, (y_max - 10.0) / height (B));
                        pause ( );
                        System.exit (0);
                        break;
                    case 3:
                        pause ( );
                        System.out.println ("This is creating the binary search tree from a sorted array, also prints in order nodes. ");
                        long startTime = System.nanoTime ( );
                        root = arrayToBst (C, 0, C.length - 1);//3
                        long elapsedTimeNs = System.nanoTime ( ) - startTime;
                        System.out.println ("TIME: " + elapsedTimeNs);
                        inOrderStack (root);
                        pause ( );
                        draw_tree (root, 0, x_max, y_max - 5, (y_max - 10.0) / height (root));
                        break;
                    case 4:
                        pause ( );
                        System.out.println ("Prints out the array from the binary search tree after extracting.");
                        array = new int[sizeOfTree (B)];//4
                        long startTime2 = System.nanoTime ( );
                        extractToArray (B);
                        long elapsedTimeNs2 = System.nanoTime ( ) - startTime2;
                        System.out.println ("TIME: " + elapsedTimeNs2);
                        for (int k = 0; k < array.length; k++) {
                            System.out.print (array[k] + " ");
                        }
                        break;
                    case 5:
                        System.out.println ("These are the keys at their designated depths.");
                        printBstDepth (B);//5
                        break;
                    default:
                        System.out.println ("Incorrect input, please try again");
                        // inOrder(B);
                        // B = delete(B,18);
                        // pause();
                        // draw_tree(B, 0, x_max, y_max-5, (y_max-10.0)/height(B));
                        // B = delete(B,5);
                        // pause();
                        // draw_tree(B, 0, x_max, y_max-5, (y_max-10.0)/height(B));
                        // B = delete(B,10);
                        // pause();
                        // draw_tree(B, 0, x_max, y_max-5, (y_max-10.0)/height(B));
                }
            }
             **/
        } catch (NullPointerException e) {
            //System.out.println ("ERROR: null pointer exception.");
        }
        catch (ArrayIndexOutOfBoundsException e) {
            System.out.println ("ERROR: array index out of bounds.");
        } catch (IllegalArgumentException e) {
            System.out.println ("ERROR: Illegal Argument.");
        }

    }
    package Pena_Lorianne_Lab3;

/**
 * Created by LoriPena on 2/19/18.
 * Lorianne Pena
 * CS 2302 Spring 2018
 * Lab 3
 */
public class bstNode {
    public int item;
    public bstNode left;
    public bstNode right;

    public bstNode(int i) {
        item = i;
        left = null;
        right = null;
    }

    public bstNode(int i, bstNode l, bstNode r) {
        item = i;
        left = l;
        right = r;
    }
}


}
